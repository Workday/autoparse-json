apply plugin: 'signing'
apply plugin: 'maven-publish'

group = GROUP
version = VERSION_NAME

java {
    withJavadocJar()
    withSourcesJar()
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL
                scm {
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                    url = POM_SCM_URL
                }
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = getReleaseRepositoryUrl()
            def snapshotsRepoUrl = getSnapshotRepositoryUrl()
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

signing {
    useGpgCmd()
    sign configurations.archives
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
